import typing as t

from atproto import CAR
from atproto.firehose.client import AsyncFirehoseClient, FirehoseClient
from atproto.xrpc_client import models
from atproto.xrpc_client.models.utils import get_or_create_model

if t.TYPE_CHECKING:
    from atproto.firehose.models import MessageFrame

# TODO(MarshalX): Everything here could be autogenerated from the lexicon.

_SUBSCRIBE_REPOS_MESSAGE_TYPE_TO_MODEL = {
    '#commit': models.ComAtprotoSyncSubscribeRepos.Commit,
    '#handle': models.ComAtprotoSyncSubscribeRepos.Handle,
    '#migrate': models.ComAtprotoSyncSubscribeRepos.Migrate,
    '#tombstone': models.ComAtprotoSyncSubscribeRepos.Tombstone,
    '#info': models.ComAtprotoSyncSubscribeRepos.Info,
}
_SUBSCRIBE_LABELS_MESSAGE_TYPE_TO_MODEL = {
    '#label': models.ComAtprotoLabelSubscribeLabels.Labels,
    '#info': models.ComAtprotoLabelSubscribeLabels.Info,
}

#: Subscribe Repos Message
SubscribeReposMessage = t.Union[
    models.ComAtprotoSyncSubscribeRepos.Commit,
    models.ComAtprotoSyncSubscribeRepos.Handle,
    models.ComAtprotoSyncSubscribeRepos.Migrate,
    models.ComAtprotoSyncSubscribeRepos.Tombstone,
    models.ComAtprotoSyncSubscribeRepos.Info,
]
#: Subscribe Labels Message
SubscribeLabelsMessage = t.Union[
    models.ComAtprotoLabelSubscribeLabels.Labels,
    models.ComAtprotoLabelSubscribeLabels.Info,
]


def parse_subscribe_repos_message(message: 'MessageFrame', *, decode_inner_cbor: bool = True) -> SubscribeReposMessage:
    """Parse Firehose repositories message to the corresponding model.

    Note:
        Use `decode_inner_cbor` only when required to increase performance.

    Args:
        message: Message frame.
        decode_inner_cbor: Decode DAG-CBOR inside models.

    Returns:
        :obj:`SubscribeReposMessage`: Corresponding message model.
    """
    model_class = _SUBSCRIBE_REPOS_MESSAGE_TYPE_TO_MODEL[message.type]
    model_instance = get_or_create_model(message.body, model_class)

    if decode_inner_cbor and isinstance(model_instance, models.ComAtprotoSyncSubscribeRepos.Commit):
        model_instance.blocks = CAR.from_bytes(model_instance.blocks)

    return model_instance


def parse_subscribe_labels_message(message: 'MessageFrame') -> SubscribeLabelsMessage:
    """Parse Firehose labels message to the corresponding model.

    Args:
        message: Message frame.

    Returns:
        :obj:`SubscribeLabelsMessage`: Corresponding message model.
    """
    model_class = _SUBSCRIBE_LABELS_MESSAGE_TYPE_TO_MODEL[message.type]
    return get_or_create_model(message.body, model_class)


class FirehoseSubscribeReposClient(FirehoseClient):
    def __init__(self, params: t.Optional[t.Union[dict, 'models.ComAtprotoSyncSubscribeRepos.Params']] = None):
        params = get_or_create_model(params, models.ComAtprotoSyncSubscribeRepos.Params)
        super().__init__(method='com.atproto.sync.subscribeRepos', params=params)


class AsyncFirehoseSubscribeReposClient(AsyncFirehoseClient):
    def __init__(self, params: t.Optional[t.Union[dict, 'models.ComAtprotoSyncSubscribeRepos.Params']] = None):
        params = get_or_create_model(params, models.ComAtprotoSyncSubscribeRepos.Params)
        super().__init__(method='com.atproto.sync.subscribeRepos', params=params)


# TODO(MarshalX): SubscribeLabels doesn't work yet? HTTP 502 Error


class FirehoseSubscribeLabelsClient(FirehoseClient):
    def __init__(self, params: t.Optional[t.Union[dict, 'models.ComAtprotoLabelSubscribeLabels']] = None):
        params = get_or_create_model(params, models.ComAtprotoLabelSubscribeLabels.Params)
        super().__init__(method='com.atproto.label.subscribeLabels', params=params)


class AsyncFirehoseSubscribeLabelsClient(AsyncFirehoseClient):
    def __init__(self, params: t.Optional[t.Union[dict, 'models.ComAtprotoLabelSubscribeLabels']] = None):
        params = get_or_create_model(params, models.ComAtprotoLabelSubscribeLabels.Params)
        super().__init__(method='com.atproto.label.subscribeLabels', params=params)
